#!/usr/bin/env bash

# Install Python in Ubuntu 16.04

# Arguments of filenames ending '-xyz' will have a list of pip packages to be installed
# into the 'xyz' virtualenv.

export PYV2='2.7.13'
export PYV3='3.6.0'

# ##############################################################################
# Dependencies

# Enforce Operating System
if ! grep -q Ubuntu /etc/os-release || ! grep -q '16[.]04' /etc/os-release ; then
    echo 'SKIP: Not in Ubuntu 16.04' 1>&2
    exit
fi

# Daily Shells
! . ~/.ds/ds.sh && echo "FATAL: sourcing daily shells" && exit 1
[ -n "$DS_LOADED" ] || exit $?

# APT
export APTPROG=apt-get
if which apt >/dev/null 2>&1 ; then
    export APTPROG=apt
fi

# ##############################################################################
# Functions

_prep_dirs () {

    # virtualenvs will stay in here:
    mkdir ~/.ve

    # projects will stay in here:
    mkdir ~/workspace

    test -d ~/.ve && test -d ~/workspace
}

_prep_profiles () {

    appendunique 'export WORKON_HOME=~/.ve' \
        "${HOME}/.bashrc" \
        "${HOME}/.zshrc" \
        || return $?https://github.com/yandex/

    appendunique 'export PROJECT_HOME=~/workspace' \
        "${HOME}/.bashrc" \
        "${HOME}/.zshrc" \
        || return $?
}

_install_deps () {

    aptaddppa 'jonathonf/python-3.6'

    sudo $APTPROG update || return $?

    typeset deps="git-core curl sqlite3"
    sudo $APTPROG install -y $deps || return $?
}

_install_pyenv () {
    # Pyenv projects:
    # https://github.com/yyuu/pyenv-installer (https://github.com/yyuu/pyenv)
    # https://github.com/yyuu/pyenv-virtualenv
    # https://github.com/yyuu/pyenv-virtualenvwrapper

    # Skip if already installed
    test -x "$HOME/.pyenv/bin/pyenv" && return

    curl -L \
        "https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer" \
        | bash

    appendunique 'export PATH="$HOME/.pyenv/bin:$PATH"' \
        "${HOME}/.bashrc" \
        "${HOME}/.zshrc"

    appendunique 'eval "$(pyenv init -)"' \
        "${HOME}/.bashrc" \
        "${HOME}/.zshrc"

    # Commenting this LOC out avoids conflicting with virtualenvwrapper...
    appendunique '#eval "$(pyenv virtualenv-init -)"' \
        "${HOME}/.bashrc" \
        "${HOME}/.zshrc"

    test -x "$HOME/.pyenv/bin/pyenv"
}

_install_tools () {
    for piplist in "$@" ; do
        pyenv activate ${piplist##*-}
        pip install $(cat "$piplist")
        pyenv deactivate
    done
}

_install_vewrapper () {

    if [ ! -d ~/.pyenv/plugins/pyenv-virtualenvwrapper ] ; then
        git clone \
            https://github.com/yyuu/pyenv-virtualenvwrapper.git \
            ~/.pyenv/plugins/pyenv-virtualenvwrapper \
            || return $?
    fi

    appendunique 'pyenv virtualenvwrapper_lazy' \
        "${HOME}/.bashrc" \
        "${HOME}/.zshrc" \
        || return $?
}

# ##############################################################################

_prep_dirs || exit $?
_prep_profiles || exit $?
_install_deps || exit $?
_install_pyenv || exit $?

# Loading pyenv into this session:
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$("$HOME/.pyenv/bin/pyenv" init -)"

pip install "$PYV3" || exit $?
pip install "$PYV2" || exit $?

# Environments:
pyenv virtualenv "$PYV3" jupyter3
pyenv virtualenv "$PYV2" ipython2
pyenv virtualenv "$PYV3" tools3
pyenv virtualenv "$PYV2" tools2

# Install iPython for Python 3 & Jupyter
pyenv activate jupyter3
pip install jupyter # iPython dependency gets automatically installed...
python -m ipykernel install --user
pyenv deactivate

# Install iPython for Python 2
pyenv activate ipython2
pip install ipykernel
python -m ipykernel install --user
pyenv deactivate

# Install argument lists:
_install_tools

# Set pyenv's PATH priority
pyenv global "$PYV3" "$PYV2" jupyter3 ipython2 tools3 tools2

_install_vewrapper || exit $?
pyenv virtualenvwrapper_lazy

