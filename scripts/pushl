#!/usr/bin/env bash

# DS - Daily Shells Library
# License:
#   See README.md document in projects page at
#   https://github.com/stroparo/ds

# ##############################################################################
# Globals

export PNAME="$(basename "$0")"
export USAGE="
NAME
    ${PNAME} - push files to target environments using LFTP program

SYNOPSIS
    ${PNAME} $(basename "$0") [-e {env-regex}] [-f {local-globs}] [-p] [-r] {srcdir} {site} [site2 [site3 ...]]

DESCRIPTION
    1) The environment list must be in the TGT{env} variable.
        Each entry in the env list must be formatted like this:
        {environment-name}:{user}:{pass}:{host}:{destination-path}
    2) TGTGLOB{env} variable might contain additional space-separated globs.
        But when globs are passed via the -f option (-f \"glob1 glob2 ...\")
        only those are going to be considered as TGTGLOB will
        only serve as the default/fallback.
    3) -r option
        Reset files, i.e. deletes them from destination before copying.
    4) -p option
        Causes ${PNAME} to only purge all files in the destination
        Usage of -r is redundant here.
"

export CONN=''
export ENVPATHS=''
export GLOBSFINAL=''

export DESTDIR=''
export SRCDIR=''

# ##############################################################################
# Prep args

# Options:

export CONNOPT=''
export ENVREGEX=''
export EXCLUDE='@@@@EXCLUDEDUMMY@@@@'
export GLOBSOPT=''
export PURGE_ONLY=false
export RESET_FILES=''

OPTIND=1
while getopts ':c:d:e:f:hprx:' opt ; do
    case ${opt} in
    h) echo "$USAGE" ; exit ;;
    c) export CONNOPT="${OPTARG}";;
    d) export DESTDIR="${OPTARG}";;
    e) export ENVREGEX="${OPTARG}";;
    f) export GLOBSOPT="${OPTARG}";;
    p) export PURGE_ONLY=true ;;
    r) export RESET_FILES=true ;;
    x) export EXCLUDE="${OPTARG}";;
    esac
done
shift $((OPTIND - 1))

export SRCDIR="$(cd ${1}; echo "$PWD")"
shift

if [ ! -d "$SRCDIR" ] || [ ! -r "$SRCDIR" ] ; then
    echo "$PNAME: FATAL: Dir '$SRCDIR' not present or not readable."
    exit 1
fi

# ##############################################################################
# Prep

# Check available lftp program:
which lftp >/dev/null 2>&1 || exit 10

# ##############################################################################
# Functions

prep () {

    if ! . "${DS_HOME}/ds.sh" "${DS_HOME}" >/dev/null 2>&1 || [ -z "${DS_LOADED}" ] ; then
        echo "${PNAME}: FATAL: Could not load DS - Daily Shells." 1>&2
        exit 1
    fi

}

ckglobs () {
    if [[ -z $GLOBSFINAL ]]; then
        elog -f -n "$pname" "Failed expanding GLOBSFINAL."
        exit 1
    fi
}

setglobs () {

    if [[ -n $GLOBSOPT ]] ; then
        export GLOBSVAL="$GLOBSOPT"
    elif [ -z "$1" ] ; then
        echo 'setglobs:SKIP: Nor a glob option neither an argument was passed so set to "*".' 1>&2
        export GLOBSVAL="*"
    else
        export GLOBSVAL="$1"
    fi

    echo "SRCDIR='$SRCDIR'"
    export GLOBSFINAL="$(cd "$SRCDIR" && eval ls -1 "${GLOBSVAL}" | tr -s '\n' ' ' | sed -e "s/${EXCLUDE}//g")"
    ckglobs
}

pushl () {

    setglobs

    for envgroup in "$@" ; do

        export ENVUPPER="$(echoupcase "$envgroup")"

        [[ -z $GLOBSOPT ]] && setglobs "$(eval echo "\${TGTGLOB${ENVUPPER}}")"

        export ENVPATHS="$(eval echo "\"\${TGT${ENVUPPER}}\"")"

        echo "==> Env '${ENVUPPER}', files: '${GLOBSFINAL}' <=="

        while IFS=':' read environ u pw h dest ; do
            [[ -z "${u}" ]] && continue

            # Filter host name:
            echogrep "${ENVREGEX}" "${environ}" > /dev/null 2>&1 || continue

            # Prep path
            if [ -n "$DESTDIR" ] ; then
                if [[ $DESTDIR = /* ]] ; then
                    dest="$DESTDIR"
                else
                    dest="${dest}/${DESTDIR}"
                fi
            fi
            CONNROOT="sftp://${h}/"
            CONN="sftp://${h}/${dest}"

            echo "${environ} => $(${PURGE_ONLY} && echo "rm in ")path: '${u}@${h}:${dest}'."

            if ${RESET_FILES:-false} || ${PURGE_ONLY:-false} ; then
                lftp -u "${u},${pw}" "${CONN}" <<EOF
set sftp:auto-confirm yes ; mrm -f ${GLOBSFINAL}
EOF
            fi
            ${PURGE_ONLY:-false} && continue

            # Put files:
            (
                if cd "${SRCDIR:-err}" ; then
                    lftp -u "${u},${pw}" "${CONNROOT}" 2>/dev/null <<EOF
set sftp:auto-confirm yes ; mkdir -p ${dest} ; cd ${dest}
EOF
                    if [ $? -eq 0 ] ; then
                        lftp -u "${u},${pw}" "${CONN}" <<EOF
set sftp:auto-confirm yes ; mput ${GLOBSFINAL}
EOF
                    fi
                fi
            )

            if [ "$?" != 0 ] ; then
                echo "${environ} => error"\! 1>&2
                echo 1>&2
                return 1
            fi
        done <<EOF
${ENVPATHS}
EOF
    done

    echo 'Pushing process complete.'
    echo ''
}

# ##############################################################################
# Main

prep
pushl "$@"
exit "$?"
